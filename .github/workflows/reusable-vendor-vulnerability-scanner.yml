# %CopyrightBegin%
#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright Ericsson AB 2024-2025. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# %CopyrightEnd%

name: Vendor Vulnerability Scanning
run-name: "[${{ inputs.version }}] Vendor Vulnerability Scanning"
description: 'Vulnerability scanning'

# 'inputs' must be repeated twice for the different use cases.
# there is no current way to share 'inputs' for workflow dispatch
# and call.

# version: reference branch to checkout and analyse for CVE.
# sarif: flag to trigger the upload of a SARIF file that contains vulnerabilities.
#        The upload of the SARIF file will make the tool to report issues under GH Security.
#        This flag is set 'true' for scheduled vulnerability analysis.
#        Does not make sense to add in PRs because each PR should not create a GH Security issue.
# fail_if_cve: makes the job fail if a CVE is found.
#        This is 'true' when analysing PRs, as we prefer a failure to detect that the PR
#        introduces a vulnerability.
#

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Reference branch to checkout and analyse'
        required: true
        default: 'master'
        type: 'string'
      sarif:
        description: 'Upload sarif file'
        required: true
        default: false
        type: boolean
      fail_if_cve:
        # The build fails if a CVE is found. This is ok to activate in PRs, but
        # does not make sense in scheduled analysis since CVEs will be reported
        # in Github Security
        description: 'Fail if CVE is found'
        required: true
        default: false
        type: boolean
  workflow_call:
    inputs:
      version:
        description: 'Reference branch to checkout and analyse'
        required: true
        default: 'master'
        type: 'string'
      sarif:
        description: 'Upload sarif file'
        required: true
        default: false
        type: boolean
      fail_if_cve:
        # The build fails if a CVE is found. This is ok to activate in PRs, but
        # does not make sense in scheduled analysis since CVEs will be reported
        # in Github Security.
        description: 'Fail if CVE is found'
        required: true
        default: false
        type: boolean

env:
  VERSION: ${{ inputs.version }}

jobs:
  analysis-vendor-dependencies:
    name: "Vulnerability Scanning of Vendor Dependencies"
    # This job is always run on the build of a `master` base-image.
    # then it copies the branch to be analysed, and scans it.
    # the main reason is that maint-25, maint-26, etc do not have this file
    # committed into them. thus, a workflow_dispatch or workflow_call would
    # not work, and we would not be able to analyse vendor dependecies there.
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      security-events: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4.2.2
      - uses: erlef/setup-beam@5304e04ea2b355f03681464e683d92e3b2f18451 # racket:actions/checkout@v1
        with:
          otp-version: '27'

      - name: Download Scanning Alerts
        run: |
          gh api -H "Accept: application/vnd.github+json" \
                 -H "X-GitHub-Api-Version: 2022-11-28" \
                 /repos/${{ github.repository }}/code-scanning/alerts?tool_name=otp-compliance > "$HOME/gh_alerts.json"

      - name: 'Analysis of dependencies in ${{ inputs.version }}'
        id: analysis
        run: |
          git clone -b ${{ env.VERSION }} https://github.com/kikofernandez/otp.git ${{ env.VERSION }}
          mkdir -p /home/runner/work/otp/otp/${{ env.VERSION }}/.github/scripts/
          curl -LJO https://raw.githubusercontent.com/kikofernandez/otp/refs/heads/master/.github/scripts/otp-compliance.es
          chmod +x otp-compliance.es
          cp otp-compliance.es \
             /home/runner/work/otp/otp/${{ env.VERSION }}/.github/scripts/otp-compliance.es
          cd /home/runner/work/otp/otp/${{ env.VERSION }} && \
          .github/scripts/otp-compliance.es sbom osv-scan \
               --version ${{ inputs.version }} \
               --fail_if_cve ${{ inputs.fail_if_cve }} \
               --gh_alerts $HOME/gh_alerts.json
          echo "changes=$(git status --porcelain=v1 2>/dev/null | wc -l)"
          git diff > mypatch.patch
          git fetch origin master
          git config --global user.name 'Kiko Fernandez-Reyes'
          git config --global user.email kiko@otp.org
          BRANCH=vulnerability-scanner-$(git rev-parse HEAD)
          git checkout -b $BRANCH origin/master
          git push --set-upstream origin $BRANCH
          git commit -am "Automated 'under_investigation' report"
          git push https://kikofernandez:${ GH_TOKEN }@github.com/kikofernandez/otp.git $BRANCH
          gh pr create -R kikofernandez/otp -B master -t "Under investigation PR" -b "Automatic `under_investigation` PR"

      - name: "Get SHA"
        if: ${{ !failure() && steps.analysis.outcome != 'skipped' && inputs.sarif }}
        id: sha
        run: |
          echo "sha=$(cd /home/runner/work/otp/otp/${{ env.VERSION }} && git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: "Upload to code-scanning"
        if: ${{ !failure() && steps.analysis.outcome != 'skipped' && inputs.sarif }}
        env:
          SHA: ${{ steps.sha.outputs.sha }}
        uses: github/codeql-action/upload-sarif@ea9e4e37992a54ee68a9622e985e60c8e8f12d9f # ratchet:github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.VERSION }}/results.sarif
          ref: refs/heads/${{ env.VERSION }}
          sha: ${{ env.SHA }}
